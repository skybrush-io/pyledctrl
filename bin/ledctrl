#!/bin/bash
# Launches the serial console on which one can watch the
# messages written by ledctrl to the serial port of the
# Arduino. Can also be used to send messages.

if [ "x$1" = x ]; then
    echo "Usage: $0 port [file]"
	echo ""
	echo "When file is given, uploads the given bytecode to the device."
	echo "Otherwise connects to the serial port of the device using screen."
	exit 1
fi

PORT="$1"
FILE="$2"

pushd "`dirname $0`"/..
BAUD_RATE=`cat ledctrl/config.h | grep '#define SERIAL_BAUD_RATE' | cut -d ' ' -f 3`
popd

# Invoke screen
if [ "x$FILE" = x ]; then
	screen "$1" "$BAUD_RATE"
else
	# Inline Python script because I'm too lazy to implement a proper Python
	# framework yet
	python <<EOF
from __future__ import print_function

import serial
import sys

def expect_response():
	while True:
		line = port.readline().strip()
		if line == "+OK":
			return True
		elif line.startswith("-E"):
			return False

bytecode = open("$FILE", "rb").read()
length = len(bytecode)
port = serial.Serial("$PORT", $BAUD_RATE)
print("Waiting for device to finish booting...", file=sys.stderr)
if not expect_response():
	print("Serial port initialization failed.", file=sys.stderr)
	sys.exit(1)
print("Sending bytecode...", file=sys.stderr)
port.write(b"U")
port.write(chr((length & 0xFF00) >> 16))
port.write(chr(length & 0xFF))
port.write(bytecode)
port.write("\n")
print("Waiting for response...", file=sys.stderr)
if not expect_response():
	print("Bytecode upload failed.", file=sys.stderr)
	sys.exit(1)
print("Bytecode uploaded successfully.", file=sys.stderr)
EOF
fi