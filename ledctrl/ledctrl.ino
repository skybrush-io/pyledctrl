#define __ASSERT_USE_STDERR

#include "config.h"
#include "commands.h"
#include "edge_detector.h"
#include "executor.h"
#include "led.h"
#include "led_strip.h"
#include "serial_protocol.h"
#include "signal_decoders.h"
#include "switch.h"
#include "bytecode_rc.h"

/**
 * The built-in LED of the board.
 */
LED builtinLed;

/**
 * The LED strip attached to the board.
 */
LEDStrip ledStrip(RED_PWM_PIN, GREEN_PWM_PIN, BLUE_PWM_PIN,
        WHITE_PWM_PIN, USE_WHITE_LED);

#ifdef MAIN_SWITCH_PIN
/**
 * An optional main switch that can be used to turn off the LED strip and
 * suspend execution.
 */
Switch mainSwitch(MAIN_SWITCH_PIN);
#endif

#ifdef VOLTMETER_PIN
/**
 * A voltmeter.
 */
VoltMeter voltmeter(VOLTMETER_PIN, LIGHT_COEFF);
#endif

#ifdef ENABLE_SERIAL_INPUT
/**
 * Parser for the messages coming on the serial port if we handle serial input.
 */
SerialProtocolParser serialProtocolParser;
#endif

/**
 * Command executor that is responsible for executing the scheduled bytecode
 * commands.
 */
CommandExecutor executor(&ledStrip);


// Set the following macro to the number of the test sequence that you want to start
// 0 = first simple test sequence
// 1 = testing transition types and easing functions
// 2 = testing jump instruction
// 3 = writable bytecode in SRAM with no program loaded by default
// 4 = writable bytecode in EEPROM with whatever program there is in the EEPROM
// 5 = read-only bytecode in PROGMEM
// 6 = test code from pyledctrl, generated by "python bin/ledctrl compile data/test.led -o ledctrl/bytecode_test.h"
// 7 = live sequence from DWD show, generated by "ledctrl compile show.sce -o show_{}.h"
#define BYTECODE_INDEX 6

#if BYTECODE_INDEX == 0
#  include "bytecode_first_test.h"
#elif BYTECODE_INDEX == 1
#  include "bytecode_transition_test.h"
#elif BYTECODE_INDEX == 2
#  include "bytecode_3_test.h"
#elif BYTECODE_INDEX == 3
#  include "bytecode_empty_writable.h"
#elif BYTECODE_INDEX == 4
#  include "bytecode_eeprom.h"
#elif BYTECODE_INDEX == 5
#  include "bytecode_progmem.h"
#elif BYTECODE_INDEX == 6
#  include "bytecode_test.h"
#elif BYTECODE_INDEX == 7
#  include "show_1.h"
#else
#  error "Invalid BYTECODE_INDEX value"
#endif

#if USE_PPM_REMOTE_CONTROLLER
PPMSignalSource signalSource(RC_INTERRUPT);
#elif USE_PWM_REMOTE_CONTROLLER
PWMSignalSource signalSource(RC_INTERRUPT);
#else
#define NUM_FAKE_SIGNAL_PINS 2
static const u8 signalSourcePins[NUM_FAKE_SIGNAL_PINS] = { A0, A5 };
DummySignalSource signalSource(NUM_FAKE_SIGNAL_PINS, signalSourcePins);
#endif

#ifdef MAIN_SWITCH_CHANNEL
EdgeDetector mainSwitchEdgeDetector;

void mainSwitchCallback(EdgeDetector* detector, long time, void* data) {
  // if we just got a new OFF state, we turn all LEDs off
  if (detector->value() == 0) {
    builtinLed.off();
    ledStrip.off();
  }
  // if we just got a new ON state, we rewind the executor
  if (detector->value() == 1) {
    executor.rewind();
  }
}
#endif

#ifdef BYTECODE_RC_CHANNEL
EdgeDetector bytecodeRCEdgeDetector;

void bytecodeRCCallback(EdgeDetector* detector, long time, void* data) {
  // if we just got a new OFF state, we set (and rewind) the main executor
  if (detector->value() == 0) {
    executor.setBytecodeStore(&bytecodeStore);
  }
  // if we just got a new ON state, we set (and rewind) the RC executor
  if (detector->value() == 1) {
    executor.setBytecodeStore(&bytecodeStore_rc);
  }
}
#endif


/**
 * Setup function; called once after a reset.
 */
void setup() {
//---------------------------------------------- Set PWM frequency for D5 & D6 -------------------------------

//TCCR0B = TCCR0B & B11111000 | B00000001;    // set timer 0 divisor to     1 for PWM frequency of 62500.00 Hz
//TCCR0B = TCCR0B & B11111000 | B00000010;    // set timer 0 divisor to     8 for PWM frequency of  7812.50 Hz
//TCCR0B = TCCR0B & B11111000 | B00000011;    // set timer 0 divisor to    64 for PWM frequency of   976.56 Hz (The DEFAULT)
//TCCR0B = TCCR0B & B11111000 | B00000100;    // set timer 0 divisor to   256 for PWM frequency of   244.14 Hz (recommended for LED use but Timer0 is used by time functions...)
//TCCR0B = TCCR0B & B11111000 | B00000101;    // set timer 0 divisor to  1024 for PWM frequency of    61.04 Hz


//---------------------------------------------- Set PWM frequency for D9 & D10 ------------------------------

//TCCR1B = TCCR1B & B11111000 | B00000001;    // set timer 1 divisor to     1 for PWM frequency of 31372.55 Hz
//TCCR1B = TCCR1B & B11111000 | B00000010;    // set timer 1 divisor to     8 for PWM frequency of  3921.16 Hz
//TCCR1B = TCCR1B & B11111000 | B00000011;    // set timer 1 divisor to    64 for PWM frequency of   490.20 Hz (The DEFAULT)
  TCCR1B = TCCR1B & B11111000 | B00000100;    // set timer 1 divisor to   256 for PWM frequency of   122.55 Hz (recommended for LED use)
//TCCR1B = TCCR1B & B11111000 | B00000101;    // set timer 1 divisor to  1024 for PWM frequency of    30.64 Hz

//---------------------------------------------- Set PWM frequency for D3 & D11 ------------------------------

//TCCR2B = TCCR2B & B11111000 | B00000001;    // set timer 1 divisor to     1 for PWM frequency of 31372.55 Hz
//TCCR2B = TCCR2B & B11111000 | B00000010;    // set timer 1 divisor to     8 for PWM frequency of  3921.16 Hz
//TCCR2B = TCCR2B & B11111000 | B00000011;    // set timer 1 divisor to    32 for PWM frequency of   980.40 Hz
//TCCR2B = TCCR2B & B11111000 | B00000100;    // set timer 1 divisor to    64 for PWM frequency of   490.20 Hz (The DEFAULT)
//TCCR2B = TCCR2B & B11111000 | B00000101;    // set timer 1 divisor to   128 for PWM frequency of   245.10 Hz
  TCCR2B = TCCR2B & B11111000 | B00000110;    // set timer 1 divisor to   256 for PWM frequency of   122.55 Hz (recommended for LED use, keep in mind that tone() won't be available)
//TCCR2B = TCCR2B & B11111000 | B00000111;    // set timer 1 divisor to  1024 for PWM frequency of    30.64 Hz


  // Wait 100 milliseconds. This is necessary to give some time to PCB's circuit
  // to prepare itself (e.g., condensators need some time to discharge)
  delay(100);

  // Configure the serial port where we will listen for commands and
  // send debug output
  Serial.begin(SERIAL_BAUD_RATE);

  // Set up the error handler as early as possible
  ErrorHandler::instance().setErrorLED(&builtinLed);

#ifdef VOLTMETER_PIN
  // Attach the voltage meter to the LED strip
  ledStrip.setVoltmeter(&voltmeter);
#endif

#if USE_PPM_REMOTE_CONTROLLER || USE_PWM_REMOTE_CONTROLLER
  // Attach to the PPM/PWM interrupts if needed
  signalSource.attachInterruptHandler();
#endif

  // Load the bytecode into the executor. We have to do it here and not
  // before the +READY prompt because errors might already happen here
  // (e.g., we are trying to load bytecode from the EEPROM but there is
  // no bytecode there) and we don't want error messages to appear
  // before the +READY prompt.
  executor.setBytecodeStore(&bytecodeStore);

  // Attach the signal source to the executor
  executor.setSignalSource(&signalSource);

#ifdef ENABLE_SERIAL_INPUT
  // Inform the serial protocol parser about the executor so the parser
  // can manipulate it. This is not really nice; a better solution would
  // be to let the parser forward the information about the parsed
  // command to a callback function, and we could then provide a callback
  // function here in the main file so the parser does not have to "know"
  // about the executor directly.
  serialProtocolParser.setCommandExecutor(&executor);
#endif

#ifdef MAIN_SWITCH_CHANNEL
  // Set up the main switch edge detector
  mainSwitchEdgeDetector.callbacks.rising = mainSwitchCallback;
  mainSwitchEdgeDetector.callbacks.falling = mainSwitchCallback;
  mainSwitchEdgeDetector.reset();
#endif

#ifdef BYTECODE_RC_CHANNEL
  // Set up the main switch edge detector
  bytecodeRCEdgeDetector.callbacks.rising = bytecodeRCCallback;
  bytecodeRCEdgeDetector.callbacks.falling = bytecodeRCCallback;
  bytecodeRCEdgeDetector.reset();
#endif

  // Reset the clock of the executor now
  executor.resetClock();

  // Print the banner to the serial port to indicate that we are ready.
  // This will be used by any other service listening on the other end of
  // the serial port to know that the boot sequence has completed and
  // we can upload new bytecode (if we start supporting that).
  // Note that we add a leading newline to the banner to make it easier
  // to find when the app sitting on the other side of the port is reading
  // the serial port line by line and there is some junk left in the
  // serial port buffer from an earlier run.
  Serial.println(F("\n+READY"));
}

/**
 * The body of the main loop of the application, executed in an infinite loop.
 */
void loop() {

#ifdef BYTECODE_RC_CHANNEL
  // Feed the bytecode rc channel signal to the edge detector
  bytecodeRCEdgeDetector.feedAnalogSignal(signalSource.channelValue(BYTECODE_RC_CHANNEL));
#endif

#ifdef MAIN_SWITCH_CHANNEL
  // Feed the mmain switch channel signal to the edge detector
  mainSwitchEdgeDetector.feedAnalogSignal(signalSource.channelValue(MAIN_SWITCH_CHANNEL));
  if (mainSwitchEdgeDetector.value() == 0) {
    // Turn off the LEDs
    builtinLed.off();
    ledStrip.off();
    return;
  }
#endif

#ifdef MAIN_SWITCH_PIN
  // Check the main switch pin
  if (!mainSwitch.on()) {
    // Turn off the LEDs
    builtinLed.off();
    ledStrip.off();
    return;
  }
#endif

#ifdef VOLTMETER_PIN
  // Update the voltmeter reading
  voltmeter.measure();
#endif

#ifdef DEBUG
  // Dump some debug information of the signal source
  // signalSource.dumpDebugInformation();
#endif

  // step the executor forward
  executor.step();
}

#ifdef ENABLE_SERIAL_INPUT
/**
 * Handler function that is called between iterations of the main loop if
 * there is data to be read from the serial port.
 */
void serialEvent() {
  while (Serial.available()) {
    serialProtocolParser.feed(Serial.read());
  }
}
#endif

/**
 * \brief Forwards assertion error messages to the serial link.
 */
void __assert(const char *__func, const char *__file, int __lineno, const char *__sexp) {
  Serial.println(__func);
  Serial.println(__file);
  Serial.println(__lineno, DEC);
  Serial.println(__sexp);
  Serial.flush();
  abort();
}
